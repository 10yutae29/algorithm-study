from cmath import inf                   # 시작 비교값을 무한대로 잡기위해 생성한 모듈


T = int(input())                        # 시행 횟수를 변수로 받음
cnt = 1                                 # 몇번째 시행인지 세어주기 위한 카운트
while T > 0:                            # 시행할 때마다 시행 전체 횟수에서 -1을 할 것이기에 전체 횟수가 0이 되면 반복문 종료
    N, M = map(int, input().split(" ")) # 정수의 개수와 끊어내는 단위 숫자로 받아오기
    lst = input().split(" ")            # list(map(int,input().split(" "))) 을 사용했을때 runtime-error 발생 - 실패 원인
                                        # 인터넷에서 런타임 에러에 대해서 살펴보던 와중 map함수를 쓰면 너무 큰 양의 데이터가 들어오면 
                                        # 에러가 발생한다는 정보를 찾아내었고 나중에 더해줄때 숫자로 바꿔주기로 하고 그냥 리스트로 받음
    max_sum = float('-inf')             # 첫 최댓값을 받기 위해 제일 작은 값을 기준으로 잡음
    min_sum = float('inf')              # 첫 최솟값을 받기 위해 제일 큰 값을 기준으로 잡음
    for idx in range(N):                # 전체 자연수들의 수 만큼 순회하면서
        if idx + M > N:                 # 만약 현재 정수의 인덱스 값에서 원하는 합계를 계산시에 전체 인덱스보다 커진다면
            continue                    # 오류가 발생할 것이기에 그 이후의 과정을 건너뛰어 에러 방지
        else:                           # 그 외의 경우(우리가 구하고자 하는 합계를 낼 수 있는 경우)
            sum_M = 0                   # 원하는 수만큼의 합계를 담아줄 변수 지정
            for i in range(M):          # 원하는 만큼 더하기 위해서 반복 진행
                sum_M += int(lst[idx+i])# runtime-error 발생시에는 int로 전환해줄 필요없이 sun_M += lst[idx+i] 로 계산 했었다. - 실패시 사용한 코드
                                        # 리스트에서 받은 수들이 숫자가 아닌 문자열로 인식이 되기에 정수로 변환해서 
                                        # 현재 인덱스 부터 원하는 만큼의 개수를 전부 더해준다
            if sum_M > max_sum:         # 만약 현재 얻은 합이 최댓값보다 크다면
                max_sum = sum_M         # 최댓값을 현재 얻은 값으로 바꾸어 준다.
            if sum_M < min_sum:         # elif를 처음 사용했었는데 #1의 경우에서 뒤로 갈수록 합계가 커져서 최솟값이 무한대로 설정되어 계산되었다.
                                        # 그래서 아예 새로운 조건문으로 설정해주면 최댓값에서 걸러지지 않은 결과값이 최솟값 비교가 될것이다.
                min_sum = sum_M         # 그 결과 최솟값보다 작으면 최솟값을 최신화해준다.
    result = max_sum - min_sum          # 그리고 마지막까지 순회해서 나온 최댓값과 최솟값을 빼주어 그 값을 result에 할당
    print(f'#{cnt} {result}')           # 문제에서 원하는 형식으로 답을 출력해줌
    cnt += 1                            # 그 다음번째 시행임을 알려주기 위해 카운트를 하나 더해준다.
    T -= 1                              # 한번 진행했으므로 전체 시행횟수에서 1을 빼주어 while조건문을 끝낼 조건을 향해가준다.

